;;; Copyright (C) 2023-2025 by Massimiliano Ghilardi
;;;
;;; This program is free software; you can redistribute it and/or modify
;;; it under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 2 of the License, or
;;; (at your option) any later version.

#!r6rs

;; this file should be included only by file wire/wire.ss

;; hashtable record-type-descriptor -> (len-proc . put-proc)
;; containing serialization procedures for all registered record-type-descriptors
(define known-rtd (make-eq-hashtable))


;; register three procedures len-proc get-proc put-proc for serializing/deserializing
;; user-defined record type objects whose record-type-descriptor is rtd.
;;
;; tag-value should be a fixnum returned by a previous call to (wire-reserve-tag)
(define (wire-register-rtd rtd tag-value len-proc get-proc put-proc)
  (assert* 'wire-register-rtd (record-type-descriptor? rtd))
  (assert* 'wire-register-rtd (fixnum? tag-value))
  (assert* 'wire-register-rtd (fx<=? min-tag-to-allocate tag-value max-tag-to-allocate))
  (assert* 'wire-register-rtd (procedure? len-proc))
  (assert* 'wire-register-rtd (procedure? get-proc))
  (assert* 'wire-register-rtd (procedure? put-proc))
  (assert* 'wire-register-rtd (logbit? 2 (procedure-arity-mask len-proc)))
  (assert* 'wire-register-rtd (logbit? 3 (procedure-arity-mask get-proc)))
  (assert* 'wire-register-rtd (logbit? 3 (procedure-arity-mask put-proc)))
  (hashtable-set! known-rtd rtd (cons len-proc put-proc))
  (vector-set! known-tag tag-value get-proc))


(define (len/record pos obj)
  (let ((procs (hashtable-ref known-rtd (record-rtd obj) #f)))
    (if procs
      ((car procs) pos obj)
      #f)))

(define (put/record bv pos obj)
  (let ((procs (hashtable-ref known-rtd (record-rtd obj) #f)))
    (if procs
      ((cdr procs) bv pos obj)
      #f)))



;; autogenerate and register procedures for serializing/deserializing
;; user-defined record type objects whose record-type-descriptor is rtd.
;;
;; the autogenerated procedures will serialize/deserialize all the object's fields,
;; provided that (record-type-field-names rtd) returns them.
;;
;; if field-n is specified, only the first field-n fields will be serialized/deserialized instead.
;;
;; if tag-value is specified, it must be a fixnum returned by a previous call to (wire-reserve-tag)
(define wire-register-rtd-fields
  (case-lambda
    ((rtd)
      (wire-register-rtd-fields rtd (vector-length (record-type-field-names rtd)) (wire-reserve-tag)))
    ((rtd field-n)
      (wire-register-rtd-fields rtd field-n (wire-reserve-tag)))
    ((rtd field-n tag-value)
      (assert* 'wire-register-rtd-fields (record-type-descriptor? rtd))
      (assert* 'wire-register-rtd-fields (fixnum? field-n))
      (assert* 'wire-register-rtd-fields (fx>=? field-n 0))
      (assert* 'wire-register-rtd-fields (fixnum? tag-value))
      (assert* 'wire-register-rtd-fields (fx<=? min-tag-to-allocate tag-value max-tag-to-allocate))
      (let ((accessors (make-vector field-n)))
        (do ((i 0 (fx1+ i)))
            ((fx>=? i field-n))
          (vector-set! accessors i (record-accessor rtd i)))
        (wire-register-rtd rtd tag-value
          (make-rtd-len-proc accessors)
          (make-rtd-get-proc (chez:record-constructor rtd) field-n)
          (make-rtd-put-proc tag-value accessors))))))


;; autogenerate and return a len-proc procedure that computes the number of bytes
;; needed to serialize a user-defined record type object having specified field accessors
(define (make-rtd-len-proc accessors)
  (let ((wire-len/rtd-fields ; name will be visible if procedure is displayed
          (lambda (pos obj)
            (let %len/rtd-fields ((pos (tag+ pos)) (obj obj) (i 0)
                                  (n (vector-length accessors)))
              (if (and pos (fx<? i n))
                (let ((accessor (vector-ref accessors i)))
                  (%len/rtd-fields (len/any pos (accessor obj)) obj (fx1+ i) n))
                pos)))))
    wire-len/rtd-fields))


;; autogenerate and return a put-proc procedure that serializes
;; a user-defined record type object having specified field accessors
(define (make-rtd-put-proc tag-value accessors)
  (let ((wire-put/rtd-fields ; name will be visible if procedure is displayed
          (lambda (bv pos obj)
            (let %put/rtd-fields ((bv bv) (pos (put/tag bv pos tag-value)) (obj obj)
                                  (i 0) (n (vector-length accessors)))
              (if (and pos (fx<? i n))
                (let* ((accessor (vector-ref accessors i))
                       (pos      (put/any bv pos (accessor obj))))
                  (%put/rtd-fields bv pos obj (fx1+ i) n))
                pos)))))
    wire-put/rtd-fields))


;; autogenerate and return a get-proc procedure that deserializes
;; a user-defined record type object having specified constructor and field count
(define (make-rtd-get-proc constructor field-n)
  (case field-n
    ((0) (make-rtd-get-proc0 constructor))
    ((1) (make-rtd-get-proc1 constructor))
    ((2) (make-rtd-get-proc2 constructor))
    ((3) (make-rtd-get-proc3 constructor))
    ((4) (make-rtd-get-proc4 constructor))
    (else (make-rtd-get-procn constructor field-n))))


;; autogenerate and return a get-proc procedure that deserializes
;; a user-defined record type object having specified constructor and zero fields
(define (make-rtd-get-proc0 constructor)
  (let ((wire-get/rtd-fields0 ; name will be visible if procedure is displayed
          (lambda (bv pos end)
            (values (if pos (constructor) #f) pos))))
    wire-get/rtd-fields0))


;; autogenerate and return a get-proc procedure that deserializes
;; a user-defined record type object having specified constructor and one field
(define (make-rtd-get-proc1 constructor)
  (let ((wire-get/rtd-fields1 ; name will be visible if procedure is displayed
          (lambda (bv pos end)
            (let-values (((field0 pos) (get/any bv pos end)))
              (values (if pos (constructor field0) #f) pos)))))
    wire-get/rtd-fields1))


;; autogenerate and return a get-proc procedure that deserializes
;; a user-defined record type object having specified constructor and two fields
(define (make-rtd-get-proc2 constructor)
  (let ((wire-get/rtd-fields2 ; name will be visible if procedure is displayed
          (lambda (bv pos end)
            (let*-values (((field0 pos) (get/any bv pos end))
                          ((field1 pos) (get/any bv pos end)))
              (values (if pos (constructor field0 field1) #f) pos)))))
    wire-get/rtd-fields2))


;; autogenerate and return a get-proc procedure that deserializes
;; a user-defined record type object having specified constructor and three fields
(define (make-rtd-get-proc3 constructor)
  (let ((wire-get/rtd-fields3 ; name will be visible if procedure is displayed
          (lambda (bv pos end)
            (let*-values (((field0 pos) (get/any bv pos end))
                          ((field1 pos) (get/any bv pos end))
                          ((field2 pos) (get/any bv pos end)))
              (values (if pos (constructor field0 field1 field2) #f) pos)))))
    wire-get/rtd-fields3))


;; autogenerate and return a get-proc procedure that deserializes
;; a user-defined record type object having specified constructor and four fields
(define (make-rtd-get-proc4 constructor)
  (let ((wire-get/rtd-fields4 ; name will be visible if procedure is displayed
          (lambda (bv pos end)
            (let*-values (((field0 pos) (get/any bv pos end))
                          ((field1 pos) (get/any bv pos end))
                          ((field2 pos) (get/any bv pos end))
                          ((field3 pos) (get/any bv pos end)))
              (values (if pos (constructor field0 field1 field2 field3) #f) pos)))))
    wire-get/rtd-fields4))


;; autogenerate and return a get-proc procedure that deserializes
;; a user-defined record type object having specified constructor and field-n fields
(define (make-rtd-get-procn constructor field-n)
  (let ((wire-get/rtd-fields ; name will be visible if procedure is displayed
          (lambda (bv pos end)
            (let %get/rtd-fields ((bv bv) (pos pos) (end end) (i 0) (fields '()))
              (if (and pos (fx<? i field-n))
                (let-values (((field-i pos) (get/any bv pos end)))
                  (%get/rtd-fields bv pos end (fx1+ i) (cons field-i fields)))
                (values (if pos
                          (apply constructor (reverse! fields))
                          #f)
                        pos))))))
    wire-get/rtd-fields))
